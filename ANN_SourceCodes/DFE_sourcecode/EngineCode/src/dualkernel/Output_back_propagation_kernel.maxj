package dualkernel;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;

class Output_back_propagation_kernel extends Kernel {
	private static int exponent = global_header.exponent;
	private static int significand = global_header.significand;
	Output_back_propagation_kernel(KernelParameters parameters,
			int M	// output vector size
) {
		super(parameters);

		// define inputs and outputs type

		DFEVectorType<DFEVar> 	OutputNetsType =
			new DFEVectorType<DFEVar>( dfeFloat(exponent, significand),		M);


		// define inputs to module:
		DFEVector<DFEVar> 	expected_output		=	io.input("expected_output", 		OutputNetsType);
		DFEVector<DFEVar> 	NN_outputs			=	io.input("NN_outputs", 	OutputNetsType);

		// define outputs to module:
		DFEVector<DFEVar> 	output_net			=	io.output("output_net", 	OutputNetsType);
		DFEVector<DFEVar> 	relative_error_out	=	io.output("relative_error_out", 	OutputNetsType);

		//relative error to PC host
		relative_error_out <== 0.5*(expected_output-NN_outputs)*(expected_output-NN_outputs);
		//Div relative error to BP
		output_net <== -(expected_output-NN_outputs);




	}
}