/**	==================================	Main Description:
*	Description:		loop-unrolling implementation of summing a.k.a. accumolator of each element in input vector into a single output entry
*	Important notice: 	in DFE java syntex I wasnt able to create a 2D DFEVar array - so i needed to spread the 2D to 1D single array.
*						the math here is the main key to addressing the right signal.
*	Designed By:		Yogev Dotan, Dor Rosenblum 
*	Revision History:	Date		Ver Num		Change
						10/8/2016	0.2			update error matrics to be a simple delta
*	====================================	*/

package dualkernel;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelConfiguration;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;

class vector_accumulator_kernel extends Kernel {

	vector_accumulator_kernel(KernelParameters parameters, int vectorSize , int PASSTHROUGH_BUS_SIZE) {
		super(parameters);
		KernelConfiguration y = getKernelConfig();
		//y.optimization.setTriAddsEnabled(true);
		y.optimization.setOptimizationTechnique(KernelConfiguration.OptimizationOptions.OptimizationTechnique.SPEED);


		DFEVectorType<DFEVar> vectorType =
			new DFEVectorType<DFEVar>(dfeUInt(32), vectorSize);
		DFEVectorType<DFEVar> passthrough_vector_Type =
			new DFEVectorType<DFEVar>(dfeUInt(32), PASSTHROUGH_BUS_SIZE);


		// Input
		DFEVector<DFEVar> inVector 		= io.input(	"inVector",
									vectorType);

		DFEVector<DFEVar> passthrough_vector_in = io.input(	"passthrough_vector_in",
									passthrough_vector_Type);

		//io.forceInputsTogether(passthrough_vector_in, inVector);


		// Local Params:
		final int OPERANDS_NUM	 	= 2;	// core add "+" is done by 2 input at a time
		final int PIPELINE_RANK		= (int) Math.ceil(Math.log(vectorSize)/Math.log(OPERANDS_NUM));	// round down to int LOG base OPERANDS_NUMBER of vectorSize
		final int PIPELINE_MAX_ROW_UNITS= (int)Math.pow(OPERANDS_NUM, PIPELINE_RANK);
		final int NEUTERAL_OPERAND	= 0;	// 0+x=x
		DFEVar neuteral_operand_value = constant.var(dfeUInt(32), NEUTERAL_OPERAND);



		DFEVectorType<DFEVar> connection_matrix_Type =
			new DFEVectorType<DFEVar>(dfeUInt(32), ((PIPELINE_RANK+1)*PIPELINE_MAX_ROW_UNITS));
		DFEVector<DFEVar> connection_matrix		=	connection_matrix_Type.newInstance(this);		// the "connection matrix" made to instruct the java compiler to connect the DFEVar units

		DFEVectorType<DFEVar> passthrough_matrix_Type =
			new DFEVectorType<DFEVar>(dfeUInt(32), ((PIPELINE_RANK+1)*PASSTHROUGH_BUS_SIZE));
		DFEVector<DFEVar> passthrough_matrix		=	passthrough_matrix_Type.newInstance(this);

		int	current_rank;
		int current_unit;

		// Connect input bus to connection_matrix:
		for (int i = 0; i < PIPELINE_MAX_ROW_UNITS; i++) {
			connection_matrix[(PIPELINE_RANK)*(PIPELINE_MAX_ROW_UNITS)+i]	<==	(i<vectorSize)? 	inVector[i]	:	neuteral_operand_value;
		}

		for (int i = 0; i < PASSTHROUGH_BUS_SIZE; i++) {
			passthrough_matrix[(PIPELINE_RANK)*(PASSTHROUGH_BUS_SIZE)+i]	<==	passthrough_vector_in[i];
		}


		// connect units between matix
		for (current_rank = PIPELINE_RANK; current_rank > 0; current_rank--) {
				for (current_unit = 1; current_unit <= (int)Math.pow(OPERANDS_NUM, current_rank-1); current_unit++) {
					connection_matrix[(current_rank-1)*(PIPELINE_MAX_ROW_UNITS)+current_unit-1]		<==	function_core	(	connection_matrix[(current_rank)*(PIPELINE_MAX_ROW_UNITS)+(current_unit-1)*OPERANDS_NUM+0],
																															connection_matrix[(current_rank)*(PIPELINE_MAX_ROW_UNITS)+(current_unit-1)*OPERANDS_NUM+1]);
					}
		}
		for (current_rank = PIPELINE_RANK; current_rank > 0; current_rank--) {
			for (current_unit = 1; current_unit <= PASSTHROUGH_BUS_SIZE; current_unit++) {
				passthrough_matrix[(current_rank-1)*(PASSTHROUGH_BUS_SIZE)+current_unit-1]		<==	passthrough_matrix[(current_rank)*(PASSTHROUGH_BUS_SIZE)+current_unit-1];
				}
	}


	//Output
	// connect output result to connection_matrix:
		DFEVar	finale_result		=	connection_matrix[0];


		DFEVector<DFEVar> passthrough_vector_out=	passthrough_vector_Type.newInstance(this);
		for ( int i = 0; i < PASSTHROUGH_BUS_SIZE; i++){
			passthrough_vector_out[i] <== passthrough_matrix[0+i];
		}

		//Output
		io.output(	"outVector",finale_result,	dfeUInt(32));

		io.output(	"passthrough_vector_out",passthrough_vector_out,	passthrough_vector_Type);

		//io.forceInputsTogether(passthrough_vector_out, finale_result);




		// Sim watch
		finale_result			.simWatch("finale_result");
		passthrough_vector_in	.simWatch("passthrough_vector_in");
		passthrough_vector_out	.simWatch("passthrough_vector_out");
		inVector				.simWatch("inVector");

	}

	private DFEVar	function_core(DFEVar	a, 	DFEVar b) {
		// This is the Core Function Unit.
		// Note that inputs and outputs are java int for "connection matrix" java drawing
		// so lets create a DFEVar registers in between the "connection matrix"

		optimization.pushPipeliningFactor(1);
		DFEVar	result		=	a+b;				// the result
		optimization.popPipeliningFactor();
		//optimization.pipeline(result);					// we will insert a register for the pipeline
		return	result;
		}
}