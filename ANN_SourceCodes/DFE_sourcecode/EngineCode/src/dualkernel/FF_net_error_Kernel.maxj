/**	==================================	Main Description:
*	Description:		The calculation of final ANN Output Layer toatl Error
*						ie, this module is used only once, as the first step of the Back Propagation -
*						after the last neuron_activation_function.
*	Designed By:		Yogev Dotan, Dor Rosenblum
*	Revision History:	Date		Ver Num		Change
						10/8/2016	0.2			update error matrics to be a simple delta
*	====================================	*/

// TODO: check use of output: "output_net" insted of "relative_error_out"

package dualkernel;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;

class FF_net_error_Kernel extends Kernel {
	private static int exponent 		= global_header.exponent;
	private static int significand		= global_header.significand;
	FF_net_error_Kernel(KernelParameters parameters,
			String 	NAME,	// instance name
			int 	M		// output layer's vector size
) {
		super(parameters);
		if (global_header.en_debug_print) debug.simPrintf("======> %s \n" ,NAME);
		if (global_header.en_debug_print) debug.simPrintf("\n with params:M=%d \n",  M);
		// define inputs and outputs type

		DFEVectorType<DFEVar> 	OutputNetsType =
			new DFEVectorType<DFEVar>( dfeFloat(exponent, significand),		M);


		// define inputs to module:
		DFEVector<DFEVar> 	expected_output		=	io.input("expected_output", 		OutputNetsType);
		DFEVector<DFEVar> 	NN_outputs			=	io.input("NN_outputs", 				OutputNetsType);

		// define outputs to module:
		DFEVector<DFEVar> 	relative_error_out	=	io.output("relative_error_out", 	OutputNetsType);

		//relative error to PC host
		//relative_error_out <== (expected_output-NN_outputs); // update error matrics to be a simple delta //0.5*(expected_output-NN_outputs)*(expected_output-NN_outputs);
		for (int m=0; m<M; m++) {
			relative_error_out[m]	<==	expected_output[m]-NN_outputs[m];
			if (global_header.en_debug_print) debug.simPrintf("relative_error_out[%d]= %f	= %f - %f \n" ,m, relative_error_out[m], expected_output[m], NN_outputs[m]);
		}

		if (global_header.en_debug_print) expected_output.simWatch("expected_output");
		if (global_header.en_debug_print) NN_outputs.simWatch("NN_outputs");
		if (global_header.en_debug_print) relative_error_out.simWatch("relative_error_out");
	}
}